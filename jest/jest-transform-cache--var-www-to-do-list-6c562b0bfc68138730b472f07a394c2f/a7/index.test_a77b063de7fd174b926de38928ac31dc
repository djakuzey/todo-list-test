/* istanbul ignore next */'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;}; /**
                                                                                                                                                                                                                                                                                                * Testing our Button component
                                                                                                                                                                                                                                                                                                */

var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');

var /* istanbul ignore next */_index = require('../index'); /* istanbul ignore next */var _index2 = _interopRequireDefault(_index);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var handleRoute = function handleRoute() {};
var href = 'http://mxstbr.com';
var children = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'h1', /* istanbul ignore next */null, /* istanbul ignore next */'Test');
var renderComponent = function renderComponent() /* istanbul ignore next */{var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};return (/* istanbul ignore next */(0, _enzyme.mount)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */_extends({ href: href }, props),
      children)));};



describe('<Button />', function () {
  it('should render an <a> tag if no route is specified', function () {
    var renderedComponent = renderComponent({ href: href });
    expect(renderedComponent.find('a').length).toEqual(1);
  });

  it('should render a <button> tag to change route if the handleRoute prop is specified', function () {
    var renderedComponent = renderComponent({ handleRoute: handleRoute });
    expect(renderedComponent.find('button').length).toEqual(1);
  });

  it('should have children', function () {
    var renderedComponent = renderComponent();
    expect(renderedComponent.contains(children)).toEqual(true);
  });

  it('should handle click events', function () {
    var onClickSpy = jest.fn();
    var renderedComponent = renderComponent({ onClick: onClickSpy });
    renderedComponent.find('a').simulate('click');
    expect(onClickSpy).toHaveBeenCalled();
  });

  it('should have a className attribute', function () {
    var renderedComponent = renderComponent();
    expect(renderedComponent.find('a').prop('className')).toBeDefined();
  });

  it('should not adopt a type attribute when rendering an <a> tag', function () {
    var type = 'text/html';
    var renderedComponent = renderComponent({ href: href, type: type });
    expect(renderedComponent.find('a').prop('type')).toBeUndefined();
  });

  it('should not adopt a type attribute when rendering a button', function () {
    var type = 'submit';
    var renderedComponent = renderComponent({ handleRoute: handleRoute, type: type });
    expect(renderedComponent.find('button').prop('type')).toBeUndefined();
  });
});