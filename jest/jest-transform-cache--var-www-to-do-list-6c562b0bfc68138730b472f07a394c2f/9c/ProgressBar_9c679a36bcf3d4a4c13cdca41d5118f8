/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_bb32zzkgb = function () {var path = '/var/www/to do list/app/components/ProgressBar/ProgressBar.js',hash = 'ce4e3e9c47d412990e652485e4e0b8f6122881f9',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/var/www/to do list/app/components/ProgressBar/ProgressBar.js', statementMap: { '0': { start: { line: 20, column: 4 }, end: { line: 20, column: 17 } }, '1': { start: { line: 21, column: 4 }, end: { line: 21, column: 51 } }, '2': { start: { line: 22, column: 4 }, end: { line: 22, column: 47 } }, '3': { start: { line: 23, column: 4 }, end: { line: 25, column: 6 } }, '4': { start: { line: 29, column: 4 }, end: { line: 29, column: 33 } }, '5': { start: { line: 33, column: 4 }, end: { line: 37, column: 5 } }, '6': { start: { line: 35, column: 6 }, end: { line: 35, column: 35 } }, '7': { start: { line: 36, column: 6 }, end: { line: 36, column: 32 } }, '8': { start: { line: 38, column: 4 }, end: { line: 42, column: 5 } }, '9': { start: { line: 40, column: 6 }, end: { line: 40, column: 33 } }, '10': { start: { line: 41, column: 6 }, end: { line: 41, column: 31 } }, '11': { start: { line: 44, column: 4 }, end: { line: 44, column: 32 } }, '12': { start: { line: 49, column: 4 }, end: { line: 52, column: 5 } }, '13': { start: { line: 50, column: 6 }, end: { line: 50, column: 35 } }, '14': { start: { line: 51, column: 6 }, end: { line: 51, column: 32 } }, '15': { start: { line: 53, column: 4 }, end: { line: 56, column: 5 } }, '16': { start: { line: 54, column: 6 }, end: { line: 54, column: 33 } }, '17': { start: { line: 55, column: 6 }, end: { line: 55, column: 31 } }, '18': { start: { line: 64, column: 22 }, end: { line: 64, column: 32 } }, '19': { start: { line: 65, column: 4 }, end: { line: 65, column: 53 } }, '20': { start: { line: 66, column: 4 }, end: { line: 66, column: 42 } }, '21': { start: { line: 67, column: 4 }, end: { line: 69, column: 7 } }, '22': { start: { line: 77, column: 4 }, end: { line: 79, column: 5 } }, '23': { start: { line: 78, column: 6 }, end: { line: 78, column: 70 } }, '24': { start: { line: 87, column: 4 }, end: { line: 101, column: 5 } }, '25': { start: { line: 88, column: 6 }, end: { line: 96, column: 9 } }, '26': { start: { line: 91, column: 8 }, end: { line: 95, column: 16 } }, '27': { start: { line: 92, column: 10 }, end: { line: 94, column: 45 } }, '28': { start: { line: 94, column: 19 }, end: { line: 94, column: 43 } }, '29': { start: { line: 98, column: 6 }, end: { line: 100, column: 9 } }, '30': { start: { line: 105, column: 24 }, end: { line: 105, column: 34 } }, '31': { start: { line: 108, column: 21 }, end: { line: 108, column: 50 } }, '32': { start: { line: 111, column: 18 }, end: { line: 111, column: 63 } }, '33': { start: { line: 113, column: 4 }, end: { line: 117, column: 6 } }, '34': { start: { line: 121, column: 0 }, end: { line: 123, column: 2 } } }, fnMap: { '0': { name: '(anonymous_0)', decl: { start: { line: 19, column: 2 }, end: { line: 19, column: 3 } }, loc: { start: { line: 19, column: 21 }, end: { line: 26, column: 3 } }, line: 19 }, '1': { name: '(anonymous_1)', decl: { start: { line: 28, column: 2 }, end: { line: 28, column: 3 } }, loc: { start: { line: 28, column: 22 }, end: { line: 30, column: 3 } }, line: 28 }, '2': { name: '(anonymous_2)', decl: { start: { line: 32, column: 2 }, end: { line: 32, column: 3 } }, loc: { start: { line: 32, column: 39 }, end: { line: 45, column: 3 } }, line: 32 }, '3': { name: '(anonymous_3)', decl: { start: { line: 47, column: 2 }, end: { line: 47, column: 3 } }, loc: { start: { line: 47, column: 25 }, end: { line: 57, column: 3 } }, line: 47 }, '4': { name: '(anonymous_4)', decl: { start: { line: 59, column: 2 }, end: { line: 59, column: 3 } }, loc: { start: { line: 59, column: 14 }, end: { line: 70, column: 3 } }, line: 59 }, '5': { name: '(anonymous_5)', decl: { start: { line: 72, column: 2 }, end: { line: 72, column: 3 } }, loc: { start: { line: 72, column: 21 }, end: { line: 102, column: 3 } }, line: 72 }, '6': { name: '(anonymous_6)', decl: { start: { line: 90, column: 9 }, end: { line: 90, column: 10 } }, loc: { start: { line: 90, column: 15 }, end: { line: 96, column: 7 } }, line: 90 }, '7': { name: '(anonymous_7)', decl: { start: { line: 91, column: 34 }, end: { line: 91, column: 35 } }, loc: { start: { line: 91, column: 40 }, end: { line: 95, column: 9 } }, line: 91 }, '8': { name: '(anonymous_8)', decl: { start: { line: 94, column: 13 }, end: { line: 94, column: 14 } }, loc: { start: { line: 94, column: 19 }, end: { line: 94, column: 43 } }, line: 94 }, '9': { name: '(anonymous_9)', decl: { start: { line: 104, column: 2 }, end: { line: 104, column: 3 } }, loc: { start: { line: 104, column: 11 }, end: { line: 118, column: 3 } }, line: 104 } }, branchMap: { '0': { loc: { start: { line: 33, column: 4 }, end: { line: 37, column: 5 } }, type: 'if', locations: [{ start: { line: 33, column: 4 }, end: { line: 37, column: 5 } }, { start: { line: 33, column: 4 }, end: { line: 37, column: 5 } }], line: 33 }, '1': { loc: { start: { line: 38, column: 4 }, end: { line: 42, column: 5 } }, type: 'if', locations: [{ start: { line: 38, column: 4 }, end: { line: 42, column: 5 } }, { start: { line: 38, column: 4 }, end: { line: 42, column: 5 } }], line: 38 }, '2': { loc: { start: { line: 49, column: 4 }, end: { line: 52, column: 5 } }, type: 'if', locations: [{ start: { line: 49, column: 4 }, end: { line: 52, column: 5 } }, { start: { line: 49, column: 4 }, end: { line: 52, column: 5 } }], line: 49 }, '3': { loc: { start: { line: 53, column: 4 }, end: { line: 56, column: 5 } }, type: 'if', locations: [{ start: { line: 53, column: 4 }, end: { line: 56, column: 5 } }, { start: { line: 53, column: 4 }, end: { line: 56, column: 5 } }], line: 53 }, '4': { loc: { start: { line: 66, column: 14 }, end: { line: 66, column: 41 } }, type: 'cond-expr', locations: [{ start: { line: 66, column: 29 }, end: { line: 66, column: 36 } }, { start: { line: 66, column: 39 }, end: { line: 66, column: 41 } }], line: 66 }, '5': { loc: { start: { line: 77, column: 4 }, end: { line: 79, column: 5 } }, type: 'if', locations: [{ start: { line: 77, column: 4 }, end: { line: 79, column: 5 } }, { start: { line: 77, column: 4 }, end: { line: 79, column: 5 } }], line: 77 }, '6': { loc: { start: { line: 77, column: 8 }, end: { line: 77, column: 71 } }, type: 'binary-expr', locations: [{ start: { line: 77, column: 8 }, end: { line: 77, column: 27 } }, { start: { line: 77, column: 31 }, end: { line: 77, column: 49 } }, { start: { line: 77, column: 53 }, end: { line: 77, column: 71 } }], line: 77 }, '7': { loc: { start: { line: 87, column: 4 }, end: { line: 101, column: 5 } }, type: 'if', locations: [{ start: { line: 87, column: 4 }, end: { line: 101, column: 5 } }, { start: { line: 87, column: 4 }, end: { line: 101, column: 5 } }], line: 87 }, '8': { loc: { start: { line: 108, column: 21 }, end: { line: 108, column: 50 } }, type: 'binary-expr', locations: [{ start: { line: 108, column: 21 }, end: { line: 108, column: 32 } }, { start: { line: 108, column: 36 }, end: { line: 108, column: 50 } }], line: 108 }, '9': { loc: { start: { line: 111, column: 31 }, end: { line: 111, column: 57 } }, type: 'cond-expr', locations: [{ start: { line: 111, column: 46 }, end: { line: 111, column: 47 } }, { start: { line: 111, column: 50 }, end: { line: 111, column: 57 } }], line: 111 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 0, '34': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0 }, b: { '0': [0, 0], '1': [0, 0], '2': [0, 0], '3': [0, 0], '4': [0, 0], '5': [0, 0], '6': [0, 0, 0], '7': [0, 0], '8': [0, 0], '9': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();





var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_Wrapper = require('./Wrapper'); /* istanbul ignore next */var _Wrapper2 = _interopRequireDefault(_Wrapper);
var /* istanbul ignore next */_Percent = require('./Percent'); /* istanbul ignore next */var _Percent2 = _interopRequireDefault(_Percent);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *
rogressBar

var ProgressBar = function (_React$Component) {_inherits(ProgressBar, _React$Component);





  function /* istanbul ignore next */ProgressBar(props) {/* istanbul ignore next */_classCallCheck(this, ProgressBar);++cov_bb32zzkgb.f[0];++cov_bb32zzkgb.s[0];var _this = _possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).call(this,
    props)); /* istanbul ignore next */++cov_bb32zzkgb.s[1];
    /* istanbul ignore next */_this.handleProps = /* istanbul ignore next */_this.handleProps.bind( /* istanbul ignore next */_this); /* istanbul ignore next */++cov_bb32zzkgb.s[2];
    /* istanbul ignore next */_this.increment = /* istanbul ignore next */_this.increment.bind( /* istanbul ignore next */_this); /* istanbul ignore next */++cov_bb32zzkgb.s[3];
    /* istanbul ignore next */_this.state = {
      percent: props.percent }; /* istanbul ignore next */return _this;

  }_createClass(ProgressBar, [{ key: 'componentDidMount', value: function componentDidMount()

    {/* istanbul ignore next */++cov_bb32zzkgb.f[1];++cov_bb32zzkgb.s[4];
      this.handleProps(this.props);
    } }, { key: 'componentWillReceiveProps', value: function componentWillReceiveProps(

    nextProps) {/* istanbul ignore next */++cov_bb32zzkgb.f[2];++cov_bb32zzkgb.s[5];
      if (this.interval) {/* istanbul ignore next */++cov_bb32zzkgb.b[0][0];++cov_bb32zzkgb.s[6];
        // stop progress when new props come in.
        clearInterval(this.interval); /* istanbul ignore next */++cov_bb32zzkgb.s[7];
        this.interval = undefined;
      } else /* istanbul ignore next */{++cov_bb32zzkgb.b[0][1];}++cov_bb32zzkgb.s[8];
      if (this.timeout) {/* istanbul ignore next */++cov_bb32zzkgb.b[1][0];++cov_bb32zzkgb.s[9];
        // clear timeout when new props come in.
        clearTimeout(this.timeout); /* istanbul ignore next */++cov_bb32zzkgb.s[10];
        this.timeout = undefined;
      } else /* istanbul ignore next */{++cov_bb32zzkgb.b[1][1];}
      // start progress with updated props.
      ++cov_bb32zzkgb.s[11];this.handleProps(nextProps);
    } }, { key: 'componentWillUnmount', value: function componentWillUnmount()

    {/* istanbul ignore next */++cov_bb32zzkgb.f[3];++cov_bb32zzkgb.s[12];
      // cleaning up interval and timeout.
      if (this.interval) {/* istanbul ignore next */++cov_bb32zzkgb.b[2][0];++cov_bb32zzkgb.s[13];
        clearInterval(this.interval); /* istanbul ignore next */++cov_bb32zzkgb.s[14];
        this.interval = undefined;
      } else /* istanbul ignore next */{++cov_bb32zzkgb.b[2][1];}++cov_bb32zzkgb.s[15];
      if (this.timeout) {/* istanbul ignore next */++cov_bb32zzkgb.b[3][0];++cov_bb32zzkgb.s[16];
        clearTimeout(this.timeout); /* istanbul ignore next */++cov_bb32zzkgb.s[17];
        this.timeout = undefined;
      } else /* istanbul ignore next */{++cov_bb32zzkgb.b[3][1];}
    } }, { key: 'increment', value: function increment()

    {/* istanbul ignore next */++cov_bb32zzkgb.f[4];
      /**
                                                      * Increment the percent randomly.
                                                      * Only used when autoIncrement is set to true.
                                                     */var _ref = (++cov_bb32zzkgb.s[18],
      this.state),percent = _ref.percent; /* istanbul ignore next */++cov_bb32zzkgb.s[19];
      percent += Math.random() + 1 - Math.random(); /* istanbul ignore next */++cov_bb32zzkgb.s[20];
      percent = percent < 99 ? /* istanbul ignore next */(++cov_bb32zzkgb.b[4][0], percent) : /* istanbul ignore next */(++cov_bb32zzkgb.b[4][1], 99); /* istanbul ignore next */++cov_bb32zzkgb.s[21];
      this.setState({
        percent: percent });

    } }, { key: 'handleProps', value: function handleProps(

    props) {/* istanbul ignore next */var _this2 = this;++cov_bb32zzkgb.f[5];++cov_bb32zzkgb.s[22];
      /**
                                                                                                     * Increment progress bar if auto increment is set to true
                                                                                                     * and progress percent is less than 99.
                                                                                                    */
      if ( /* istanbul ignore next */(++cov_bb32zzkgb.b[6][0], props.autoIncrement) && /* istanbul ignore next */(++cov_bb32zzkgb.b[6][1], props.percent >= 0) && /* istanbul ignore next */(++cov_bb32zzkgb.b[6][2], props.percent < 99)) {/* istanbul ignore next */++cov_bb32zzkgb.b[5][0];++cov_bb32zzkgb.s[23];
        this.interval = setInterval(this.increment, props.intervalTime);
      } else /* istanbul ignore next */{++cov_bb32zzkgb.b[5][1];}

      /**
                                                                   * Reset the progress bar when percent hits 100
                                                                   * For better visual effects, percent is set to 99.9
                                                                   * and then cleared in the callback after some time.
                                                                  */++cov_bb32zzkgb.s[24];

      if (props.percent >= 100) {/* istanbul ignore next */++cov_bb32zzkgb.b[7][0];++cov_bb32zzkgb.s[25];
        this.setState({
          percent: 99.9 },
        function () {/* istanbul ignore next */++cov_bb32zzkgb.f[6];++cov_bb32zzkgb.s[26];
          /* istanbul ignore next */_this2.timeout = setTimeout(function () {/* istanbul ignore next */++cov_bb32zzkgb.f[7];++cov_bb32zzkgb.s[27];
            /* istanbul ignore next */_this2.setState({
              percent: -1 },
            function () {/* istanbul ignore next */++cov_bb32zzkgb.f[8];++cov_bb32zzkgb.s[28];return props.updateProgress(-1);});
          }, 300);
        });
      } else {/* istanbul ignore next */++cov_bb32zzkgb.b[7][1];++cov_bb32zzkgb.s[29];
        this.setState({
          percent: props.percent });

      }
    } }, { key: 'render', value: function render()

    {/* istanbul ignore next */++cov_bb32zzkgb.f[9];var _ref2 = (++cov_bb32zzkgb.s[30],
      this.state),percent = _ref2.percent;

      // Hide progress bar if percent is less than 0.
      var isHidden = /* istanbul ignore next */(++cov_bb32zzkgb.s[31], /* istanbul ignore next */(++cov_bb32zzkgb.b[8][0], percent < 0) || /* istanbul ignore next */(++cov_bb32zzkgb.b[8][1], percent >= 100));

      // Set `state.percent` as width.
      var style = /* istanbul ignore next */(++cov_bb32zzkgb.s[32], { width: /* istanbul ignore next */(percent <= 0 ? /* istanbul ignore next */(++cov_bb32zzkgb.b[9][0], 0) : /* istanbul ignore next */(++cov_bb32zzkgb.b[9][1], percent)) + '%' }); /* istanbul ignore next */++cov_bb32zzkgb.s[33];

      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Wrapper2.default, /* istanbul ignore next */{ hidden: isHidden },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Percent2.default, /* istanbul ignore next */{ style: style })));


    } }]);return ProgressBar;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */ProgressBar.defaultProps = { percent: -1, autoIncrement: true, intervalTime: 75 }; /* istanbul ignore next */++cov_bb32zzkgb.s[34];


ProgressBar.propTypes = {
  percent: /* istanbul ignore next */_react.PropTypes.number.isRequired }; /* istanbul ignore next */exports.default =


ProgressBar;