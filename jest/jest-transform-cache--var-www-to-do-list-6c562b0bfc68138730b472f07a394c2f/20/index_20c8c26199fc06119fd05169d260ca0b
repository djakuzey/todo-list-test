/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.RepoListItem = undefined;var cov_14guvpw7ra = function () {var path = '/var/www/to do list/app/containers/RepoListItem/index.js',hash = '4bbd97bd9f742d93d21dcb26c343e4d961b2a442',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/var/www/to do list/app/containers/RepoListItem/index.js', statementMap: { '0': { start: { line: 21, column: 17 }, end: { line: 21, column: 32 } }, '1': { start: { line: 22, column: 21 }, end: { line: 22, column: 23 } }, '2': { start: { line: 26, column: 4 }, end: { line: 28, column: 5 } }, '3': { start: { line: 27, column: 6 }, end: { line: 27, column: 42 } }, '4': { start: { line: 32, column: 6 }, end: { line: 40, column: 16 } }, '5': { start: { line: 44, column: 4 }, end: { line: 46, column: 6 } }, '6': { start: { line: 50, column: 0 }, end: { line: 53, column: 2 } } }, fnMap: { '0': { name: '(anonymous_0)', decl: { start: { line: 20, column: 2 }, end: { line: 20, column: 3 } }, loc: { start: { line: 20, column: 11 }, end: { line: 47, column: 3 } }, line: 20 } }, branchMap: { '0': { loc: { start: { line: 26, column: 4 }, end: { line: 28, column: 5 } }, type: 'if', locations: [{ start: { line: 26, column: 4 }, end: { line: 28, column: 5 } }, { start: { line: 26, column: 4 }, end: { line: 28, column: 5 } }], line: 26 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0 }, f: { '0': 0 }, b: { '0': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();





var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactRedux = require('react-redux');
var /* istanbul ignore next */_reselect = require('reselect');
var /* istanbul ignore next */_reactIntl = require('react-intl');

var /* istanbul ignore next */_selectors = require('containers/App/selectors');
var /* istanbul ignore next */_ListItem = require('components/ListItem'); /* istanbul ignore next */var _ListItem2 = _interopRequireDefault(_ListItem);
var /* istanbul ignore next */_IssueIcon = require('./IssueIcon'); /* istanbul ignore next */var _IssueIcon2 = _interopRequireDefault(_IssueIcon);
var /* istanbul ignore next */_IssueLink = require('./IssueLink'); /* istanbul ignore next */var _IssueLink2 = _interopRequireDefault(_IssueLink);
var /* istanbul ignore next */_RepoLink = require('./RepoLink'); /* istanbul ignore next */var _RepoLink2 = _interopRequireDefault(_RepoLink);
var /* istanbul ignore next */_Wrapper = require('./Wrapper'); /* istanbul ignore next */var _Wrapper2 = _interopRequireDefault(_Wrapper);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} /**
epoListItem

ists the name and the issue count of a repository
var RepoListItem = exports.RepoListItem = function (_React$PureComponent) {_inherits(RepoListItem, _React$PureComponent);function RepoListItem() {_classCallCheck(this, RepoListItem);return _possibleConstructorReturn(this, (RepoListItem.__proto__ || Object.getPrototypeOf(RepoListItem)).apply(this, arguments));}_createClass(RepoListItem, [{ key: 'render', // eslint-disable-line react/prefer-stateless-function
    value: function render() {/* istanbul ignore next */++cov_14guvpw7ra.f[0];var item = /* istanbul ignore next */(++cov_14guvpw7ra.s[0], this.props.item);var nameprefix = /* istanbul ignore next */(++cov_14guvpw7ra.s[1], '');

      // If the repository is owned by a different person than we got the data for
      // it's a fork and we should show the name of the owner
      /* istanbul ignore next */++cov_14guvpw7ra.s[2];if (item.owner.login !== this.props.currentUser) {/* istanbul ignore next */++cov_14guvpw7ra.b[0][0];++cov_14guvpw7ra.s[3];
        nameprefix = /* istanbul ignore next */item.owner.login + '/';
      } else /* istanbul ignore next */{++cov_14guvpw7ra.b[0][1];}

      // Put together the content of the repository
      var content = /* istanbul ignore next */(++cov_14guvpw7ra.s[4],
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Wrapper2.default, /* istanbul ignore next */null,
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RepoLink2.default, /* istanbul ignore next */{ href: item.html_url, target: '_blank' },
          nameprefix + item.name),

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_IssueLink2.default, /* istanbul ignore next */{ href: /* istanbul ignore next */item.html_url + '/issues', target: '_blank' },
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_IssueIcon2.default, /* istanbul ignore next */null),
          /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactIntl.FormattedNumber, /* istanbul ignore next */{ value: item.open_issues_count }))));




      // Render the content into a list item
      /* istanbul ignore next */++cov_14guvpw7ra.s[5];return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ListItem2.default, /* istanbul ignore next */{ key: /* istanbul ignore next */'repo-list-item-' + item.full_name, item: content }));

    } }]);return RepoListItem;}( /* istanbul ignore next */_react2.default.PureComponent); /* istanbul ignore next */++cov_14guvpw7ra.s[6];


RepoListItem.propTypes = {
  item: /* istanbul ignore next */_react2.default.PropTypes.object,
  currentUser: /* istanbul ignore next */_react2.default.PropTypes.string }; /* istanbul ignore next */exports.default =


/* istanbul ignore next */(0, _reactRedux.connect)( /* istanbul ignore next */(0, _reselect.createStructuredSelector)({
  currentUser: /* istanbul ignore next */(0, _selectors.makeSelectCurrentUser)() }))(
RepoListItem);