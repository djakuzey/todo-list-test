/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_4mqvmsm94 = function () {var path = '/var/www/to do list/app/containers/HomePage/sagas.js',hash = '05705e4650abb7e87b9bf56d3aa7b59e95876b16',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/var/www/to do list/app/containers/HomePage/sagas.js', statementMap: { '0': { start: { line: 18, column: 19 }, end: { line: 18, column: 53 } }, '1': { start: { line: 19, column: 21 }, end: { line: 19, column: 91 } }, '2': { start: { line: 21, column: 2 }, end: { line: 27, column: 3 } }, '3': { start: { line: 23, column: 18 }, end: { line: 23, column: 49 } }, '4': { start: { line: 24, column: 4 }, end: { line: 24, column: 44 } }, '5': { start: { line: 26, column: 4 }, end: { line: 26, column: 37 } }, '6': { start: { line: 37, column: 18 }, end: { line: 37, column: 56 } }, '7': { start: { line: 40, column: 2 }, end: { line: 40, column: 30 } }, '8': { start: { line: 41, column: 2 }, end: { line: 41, column: 24 } } }, fnMap: { '0': { name: 'getRepos', decl: { start: { line: 16, column: 17 }, end: { line: 16, column: 25 } }, loc: { start: { line: 16, column: 28 }, end: { line: 28, column: 1 } }, line: 16 }, '1': { name: 'githubData', decl: { start: { line: 33, column: 17 }, end: { line: 33, column: 27 } }, loc: { start: { line: 33, column: 30 }, end: { line: 42, column: 1 } }, line: 33 } }, branchMap: {}, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0 }, f: { '0': 0, '1': 0 }, b: {}, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();exports.














getRepos = getRepos; /* istanbul ignore next */exports.
















githubData = githubData;var /* istanbul ignore next */_effects = require('redux-saga/effects');var /* istanbul ignore next */_reactRouterRedux = require('react-router-redux');var /* istanbul ignore next */_constants = require('containers/App/constants');var /* istanbul ignore next */_actions = require('containers/App/actions');var /* istanbul ignore next */_request = require('utils/request'); /* istanbul ignore next */var _request2 = _interopRequireDefault(_request);var /* istanbul ignore next */_selectors = require('containers/HomePage/selectors'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _marked = [getRepos, githubData].map(regeneratorRuntime.mark); /**
ets the repositories of the user from Github

ithub repos request/response handler
function getRepos() /* istanbul ignore next */{var username, requestURL, repos;return regeneratorRuntime.wrap(function getRepos$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:++cov_4mqvmsm94.f[0];++cov_4mqvmsm94.s[0];_context.next = 4;return (/* istanbul ignore next */(0, _effects.select)( /* istanbul ignore next */(0, _selectors.makeSelectUsername)()));case 4:username = _context.sent;requestURL = (++cov_4mqvmsm94.s[1], 'https://api.github.com/users/' + username + '/repos?type=all&sort=updated');++cov_4mqvmsm94.s[2];_context.prev = 7;++cov_4mqvmsm94.s[3];_context.next = 11;return (/* istanbul ignore next */(0, _effects.call)( /* istanbul ignore next */_request2.default, requestURL));case 11:repos = _context.sent;++cov_4mqvmsm94.s[4];_context.next = 15;return (/* istanbul ignore next */(0, _effects.put)( /* istanbul ignore next */(0, _actions.reposLoaded)(repos, username)));case 15:_context.next = 22;break;case 17:_context.prev = 17;_context.t0 = _context['catch'](7);++cov_4mqvmsm94.s[5];_context.next = 22;return (/* istanbul ignore next */(0, _effects.put)( /* istanbul ignore next */(0, _actions.repoLoadingError)( /* istanbul ignore next */_context.t0)));case 22:case 'end':return _context.stop();}}}, _marked[0], this, [[7, 17]]);} /**
oot saga manages watcher lifecycle
function githubData() /* istanbul ignore next */{var watcher;return regeneratorRuntime.wrap(function githubData$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:++cov_4mqvmsm94.f[1];++cov_4mqvmsm94.s[6];_context2.next = 4;return (/* istanbul ignore next */(0, _effects.takeLatest)( /* istanbul ignore next */_constants.LOAD_REPOS, getRepos));case 4:watcher = _context2.sent;++cov_4mqvmsm94.s[7];_context2.next = 8;return (
            /* istanbul ignore next */(0, _effects.take)( /* istanbul ignore next */_reactRouterRedux.LOCATION_CHANGE));case 8:++cov_4mqvmsm94.s[8];_context2.next = 11;return (
            /* istanbul ignore next */(0, _effects.cancel)(watcher));case 11:case 'end':return _context2.stop();}}}, _marked[1], this);}


// Bootstrap sagas
/* istanbul ignore next */exports.default = [
githubData];