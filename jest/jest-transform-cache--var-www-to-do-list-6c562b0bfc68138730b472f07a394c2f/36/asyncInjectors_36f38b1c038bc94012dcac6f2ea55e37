/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var cov_ripeyfdle = function () {var path = '/var/www/to do list/app/utils/asyncInjectors.js',hash = '28fb18c206aa8943b2374005fdf0bbaaea7146c9',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/var/www/to do list/app/utils/asyncInjectors.js', statementMap: { '0': { start: { line: 15, column: 16 }, end: { line: 22, column: 3 } }, '1': { start: { line: 23, column: 2 }, end: { line: 26, column: 4 } }, '2': { start: { line: 33, column: 2 }, end: { line: 45, column: 4 } }, '3': { start: { line: 34, column: 4 }, end: { line: 34, column: 36 } }, '4': { start: { line: 34, column: 18 }, end: { line: 34, column: 36 } }, '5': { start: { line: 36, column: 4 }, end: { line: 39, column: 6 } }, '6': { start: { line: 41, column: 4 }, end: { line: 41, column: 55 } }, '7': { start: { line: 41, column: 48 }, end: { line: 41, column: 55 } }, '8': { start: { line: 43, column: 4 }, end: { line: 43, column: 45 } }, '9': { start: { line: 44, column: 4 }, end: { line: 44, column: 61 } }, '10': { start: { line: 52, column: 2 }, end: { line: 66, column: 4 } }, '11': { start: { line: 53, column: 4 }, end: { line: 53, column: 36 } }, '12': { start: { line: 53, column: 18 }, end: { line: 53, column: 36 } }, '13': { start: { line: 55, column: 4 }, end: { line: 58, column: 6 } }, '14': { start: { line: 60, column: 4 }, end: { line: 63, column: 6 } }, '15': { start: { line: 65, column: 4 }, end: { line: 65, column: 29 } }, '16': { start: { line: 73, column: 2 }, end: { line: 73, column: 20 } }, '17': { start: { line: 75, column: 2 }, end: { line: 78, column: 4 } } }, fnMap: { '0': { name: 'checkStore', decl: { start: { line: 14, column: 16 }, end: { line: 14, column: 26 } }, loc: { start: { line: 14, column: 34 }, end: { line: 27, column: 1 } }, line: 14 }, '1': { name: 'injectAsyncReducer', decl: { start: { line: 32, column: 16 }, end: { line: 32, column: 34 } }, loc: { start: { line: 32, column: 51 }, end: { line: 46, column: 1 } }, line: 32 }, '2': { name: 'injectReducer', decl: { start: { line: 33, column: 18 }, end: { line: 33, column: 31 } }, loc: { start: { line: 33, column: 52 }, end: { line: 45, column: 3 } }, line: 33 }, '3': { name: 'injectAsyncSagas', decl: { start: { line: 51, column: 16 }, end: { line: 51, column: 32 } }, loc: { start: { line: 51, column: 49 }, end: { line: 67, column: 1 } }, line: 51 }, '4': { name: 'injectSagas', decl: { start: { line: 52, column: 18 }, end: { line: 52, column: 29 } }, loc: { start: { line: 52, column: 37 }, end: { line: 66, column: 3 } }, line: 52 }, '5': { name: 'getAsyncInjectors', decl: { start: { line: 72, column: 16 }, end: { line: 72, column: 33 } }, loc: { start: { line: 72, column: 41 }, end: { line: 79, column: 1 } }, line: 72 } }, branchMap: { '0': { loc: { start: { line: 34, column: 4 }, end: { line: 34, column: 36 } }, type: 'if', locations: [{ start: { line: 34, column: 4 }, end: { line: 34, column: 36 } }, { start: { line: 34, column: 4 }, end: { line: 34, column: 36 } }], line: 34 }, '1': { loc: { start: { line: 37, column: 6 }, end: { line: 37, column: 66 } }, type: 'binary-expr', locations: [{ start: { line: 37, column: 6 }, end: { line: 37, column: 20 } }, { start: { line: 37, column: 24 }, end: { line: 37, column: 38 } }, { start: { line: 37, column: 42 }, end: { line: 37, column: 66 } }], line: 37 }, '2': { loc: { start: { line: 41, column: 4 }, end: { line: 41, column: 55 } }, type: 'if', locations: [{ start: { line: 41, column: 4 }, end: { line: 41, column: 55 } }, { start: { line: 41, column: 4 }, end: { line: 41, column: 55 } }], line: 41 }, '3': { loc: { start: { line: 53, column: 4 }, end: { line: 53, column: 36 } }, type: 'if', locations: [{ start: { line: 53, column: 4 }, end: { line: 53, column: 36 } }, { start: { line: 53, column: 4 }, end: { line: 53, column: 36 } }], line: 53 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0 }, b: { '0': [0, 0], '1': [0, 0, 0], '2': [0, 0], '3': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();exports.












checkStore = checkStore; /* istanbul ignore next */exports.

















injectAsyncReducer = injectAsyncReducer; /* istanbul ignore next */exports.


















injectAsyncSagas = injectAsyncSagas; /* istanbul ignore next */exports.




















getAsyncInjectors = getAsyncInjectors;var /* istanbul ignore next */_conformsTo = require('lodash/conformsTo'); /* istanbul ignore next */var _conformsTo2 = _interopRequireDefault(_conformsTo);var /* istanbul ignore next */_isEmpty = require('lodash/isEmpty'); /* istanbul ignore next */var _isEmpty2 = _interopRequireDefault(_isEmpty);var /* istanbul ignore next */_isFunction = require('lodash/isFunction'); /* istanbul ignore next */var _isFunction2 = _interopRequireDefault(_isFunction);var /* istanbul ignore next */_isObject = require('lodash/isObject'); /* istanbul ignore next */var _isObject2 = _interopRequireDefault(_isObject);var /* istanbul ignore next */_isString = require('lodash/isString'); /* istanbul ignore next */var _isString2 = _interopRequireDefault(_isString);var /* istanbul ignore next */_invariant = require('invariant'); /* istanbul ignore next */var _invariant2 = _interopRequireDefault(_invariant);var /* istanbul ignore next */_warning = require('warning'); /* istanbul ignore next */var _warning2 = _interopRequireDefault(_warning);var /* istanbul ignore next */_reducers = require('../reducers'); /* istanbul ignore next */var _reducers2 = _interopRequireDefault(_reducers);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**
alidate the shape of redux store
function checkStore(store) {/* istanbul ignore next */++cov_ripeyfdle.f[0];var shape = /* istanbul ignore next */(++cov_ripeyfdle.s[0], { dispatch: /* istanbul ignore next */_isFunction2.default, subscribe: /* istanbul ignore next */_isFunction2.default, getState: /* istanbul ignore next */_isFunction2.default, replaceReducer: /* istanbul ignore next */_isFunction2.default, runSaga: /* istanbul ignore next */_isFunction2.default, asyncReducers: /* istanbul ignore next */_isObject2.default }); /* istanbul ignore next */++cov_ripeyfdle.s[1]; /* istanbul ignore next */(0, _invariant2.default)( /* istanbul ignore next */(0, _conformsTo2.default)(store, shape), '(app/utils...) asyncInjectors: Expected a valid redux store');} /**
nject an asynchronously loaded reducer
function injectAsyncReducer(store, isValid) {/* istanbul ignore next */++cov_ripeyfdle.f[1];++cov_ripeyfdle.s[2];return function injectReducer(name, asyncReducer) {/* istanbul ignore next */++cov_ripeyfdle.f[2];++cov_ripeyfdle.s[3];if (!isValid) {/* istanbul ignore next */++cov_ripeyfdle.b[0][0];++cov_ripeyfdle.s[4];checkStore(store);} else /* istanbul ignore next */{++cov_ripeyfdle.b[0][1];}++cov_ripeyfdle.s[5]; /* istanbul ignore next */(0, _invariant2.default)( /* istanbul ignore next */(++cov_ripeyfdle.b[1][0], /* istanbul ignore next */(0, _isString2.default)(name)) && /* istanbul ignore next */(++cov_ripeyfdle.b[1][1], ! /* istanbul ignore next */(0, _isEmpty2.default)(name)) && /* istanbul ignore next */(++cov_ripeyfdle.b[1][2], /* istanbul ignore next */(0, _isFunction2.default)(asyncReducer)), '(app/utils...) injectAsyncReducer: Expected `asyncReducer` to be a reducer function'); /* istanbul ignore next */++cov_ripeyfdle.s[6];if (Reflect.has(store.asyncReducers, name)) {/* istanbul ignore next */++cov_ripeyfdle.b[2][0];++cov_ripeyfdle.s[7];return;} else /* istanbul ignore next */{++cov_ripeyfdle.b[2][1];}++cov_ripeyfdle.s[8];store.asyncReducers[name] = asyncReducer; // eslint-disable-line no-param-reassign
    /* istanbul ignore next */++cov_ripeyfdle.s[9];store.replaceReducer( /* istanbul ignore next */(0, _reducers2.default)(store.asyncReducers));};} /**
                                                                                                                                                      * Inject an asynchronously loaded saga
                                                                                                                                                      */function injectAsyncSagas(store, isValid) {/* istanbul ignore next */++cov_ripeyfdle.f[3];++cov_ripeyfdle.s[10];return function injectSagas(sagas) {/* istanbul ignore next */++cov_ripeyfdle.f[4];++cov_ripeyfdle.s[11];if (!isValid) {/* istanbul ignore next */++cov_ripeyfdle.b[3][0];++cov_ripeyfdle.s[12];checkStore(store);} else /* istanbul ignore next */{++cov_ripeyfdle.b[3][1];}++cov_ripeyfdle.s[13]; /* istanbul ignore next */(0, _invariant2.default)(Array.isArray(sagas), '(app/utils...) injectAsyncSagas: Expected `sagas` to be an array of generator functions'); /* istanbul ignore next */++cov_ripeyfdle.s[14]; /* istanbul ignore next */(0, _warning2.default)(! /* istanbul ignore next */(0, _isEmpty2.default)(sagas), '(app/utils...) injectAsyncSagas: Received an empty `sagas` array'); /* istanbul ignore next */++cov_ripeyfdle.s[15];sagas.map(store.runSaga);};} /**
elper for creating injectors
function getAsyncInjectors(store) {/* istanbul ignore next */++cov_ripeyfdle.f[5];++cov_ripeyfdle.s[16];checkStore(store); /* istanbul ignore next */++cov_ripeyfdle.s[17];return { injectReducer: injectAsyncReducer(store, true), injectSagas: injectAsyncSagas(store, true) };}