/* istanbul ignore next */'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');

var /* istanbul ignore next */_index = require('../index'); /* istanbul ignore next */var _index2 = _interopRequireDefault(_index);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var src = 'test.png';
var alt = 'test';
var renderComponent = function renderComponent() /* istanbul ignore next */{var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};return (/* istanbul ignore next */(0, _enzyme.shallow)(
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */_extends({ src: src, alt: alt }, props))));};


describe('<Img />', function () {
  it('should render an <img> tag', function () {
    var renderedComponent = renderComponent();
    expect(renderedComponent.is('img')).toBe(true);
  });

  it('should have an src attribute', function () {
    var renderedComponent = renderComponent();
    expect(renderedComponent.prop('src')).toEqual(src);
  });

  it('should have an alt attribute', function () {
    var renderedComponent = renderComponent();
    expect(renderedComponent.prop('alt')).toEqual(alt);
  });

  it('should not have a className attribute', function () {
    var renderedComponent = renderComponent();
    expect(renderedComponent.prop('className')).toBeUndefined();
  });

  it('should adopt a className attribute', function () {
    var className = 'test';
    var renderedComponent = renderComponent({ className: className });
    expect(renderedComponent.hasClass(className)).toBe(true);
  });

  it('should not adopt a srcset attribute', function () {
    var srcset = 'test-HD.png 2x';
    var renderedComponent = renderComponent({ srcset: srcset });
    expect(renderedComponent.prop('srcset')).toBeUndefined();
  });
});